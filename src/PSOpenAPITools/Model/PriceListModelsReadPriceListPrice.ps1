#
# Geins Management API
#  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
# Version: v1.7
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

A price for a product on a specific price list.

.PARAMETER ProductId
The id of the product that this price applies to.
.PARAMETER PriceListId
The id of the price list that this price is associated with.
.PARAMETER PriceListName
The name of the price list that this price is associated with.
.PARAMETER PriceIncVat
The price, inc VAT, in the currency of the associated price list.
.PARAMETER PriceExVat
The price, ex VAT, in the currency of the associated price list.
.PARAMETER VatRate
The Vat Rate
.PARAMETER Country
The 2-letter ISO country code for this price.
.PARAMETER Currency
The 3-letter ISO 4217 currency code for this price.
.PARAMETER StaggeredCount
Staggered count for this price. Defaults to 1.
.PARAMETER ValidFrom
The date the price is valid from.
.PARAMETER ValidTo
The date the price is valid to.
.OUTPUTS

PriceListModelsReadPriceListPrice<PSCustomObject>
#>

function Initialize-PriceListModelsReadPriceListPrice {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ProductId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${PriceListId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PriceListName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${PriceIncVat},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${PriceExVat},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${VatRate},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Country},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Currency},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${StaggeredCount},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${ValidFrom},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${ValidTo}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => PriceListModelsReadPriceListPrice' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "ProductId" = ${ProductId}
            "PriceListId" = ${PriceListId}
            "PriceListName" = ${PriceListName}
            "PriceIncVat" = ${PriceIncVat}
            "PriceExVat" = ${PriceExVat}
            "VatRate" = ${VatRate}
            "Country" = ${Country}
            "Currency" = ${Currency}
            "StaggeredCount" = ${StaggeredCount}
            "ValidFrom" = ${ValidFrom}
            "ValidTo" = ${ValidTo}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PriceListModelsReadPriceListPrice<PSCustomObject>

.DESCRIPTION

Convert from JSON to PriceListModelsReadPriceListPrice<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PriceListModelsReadPriceListPrice<PSCustomObject>
#>
function ConvertFrom-JsonToPriceListModelsReadPriceListPrice {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => PriceListModelsReadPriceListPrice' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PriceListModelsReadPriceListPrice
        $AllProperties = ("ProductId", "PriceListId", "PriceListName", "PriceIncVat", "PriceExVat", "VatRate", "Country", "Currency", "StaggeredCount", "ValidFrom", "ValidTo")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ProductId"))) { #optional property not found
            $ProductId = $null
        } else {
            $ProductId = $JsonParameters.PSobject.Properties["ProductId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PriceListId"))) { #optional property not found
            $PriceListId = $null
        } else {
            $PriceListId = $JsonParameters.PSobject.Properties["PriceListId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PriceListName"))) { #optional property not found
            $PriceListName = $null
        } else {
            $PriceListName = $JsonParameters.PSobject.Properties["PriceListName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PriceIncVat"))) { #optional property not found
            $PriceIncVat = $null
        } else {
            $PriceIncVat = $JsonParameters.PSobject.Properties["PriceIncVat"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PriceExVat"))) { #optional property not found
            $PriceExVat = $null
        } else {
            $PriceExVat = $JsonParameters.PSobject.Properties["PriceExVat"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "VatRate"))) { #optional property not found
            $VatRate = $null
        } else {
            $VatRate = $JsonParameters.PSobject.Properties["VatRate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Country"))) { #optional property not found
            $Country = $null
        } else {
            $Country = $JsonParameters.PSobject.Properties["Country"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Currency"))) { #optional property not found
            $Currency = $null
        } else {
            $Currency = $JsonParameters.PSobject.Properties["Currency"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "StaggeredCount"))) { #optional property not found
            $StaggeredCount = $null
        } else {
            $StaggeredCount = $JsonParameters.PSobject.Properties["StaggeredCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ValidFrom"))) { #optional property not found
            $ValidFrom = $null
        } else {
            $ValidFrom = $JsonParameters.PSobject.Properties["ValidFrom"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ValidTo"))) { #optional property not found
            $ValidTo = $null
        } else {
            $ValidTo = $JsonParameters.PSobject.Properties["ValidTo"].value
        }

        $PSO = [PSCustomObject]@{
            "ProductId" = ${ProductId}
            "PriceListId" = ${PriceListId}
            "PriceListName" = ${PriceListName}
            "PriceIncVat" = ${PriceIncVat}
            "PriceExVat" = ${PriceExVat}
            "VatRate" = ${VatRate}
            "Country" = ${Country}
            "Currency" = ${Currency}
            "StaggeredCount" = ${StaggeredCount}
            "ValidFrom" = ${ValidFrom}
            "ValidTo" = ${ValidTo}
        }

        return $PSO
    }

}

