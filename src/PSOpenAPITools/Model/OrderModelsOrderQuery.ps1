#
# Geins Management API
#  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
# Version: v1.7
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Data carrying class for order queries

.PARAMETER Updated
Given a date, only orders updated after the provided date will be returned.
.PARAMETER StatusList
Comma separated list of statuses to filter on.
.PARAMETER MarketId
Id of a market.
.PARAMETER PaymentName
Name of a payment method
.PARAMETER ParcelGroupId
Id of a parcel group.
.PARAMETER CustomerId
The ID of a customer
.PARAMETER Email
The email of a customer
.PARAMETER Include
Comma separated list of child-collections to also include in the query result.
.PARAMETER ExternalOrderStatus
This status can be used by external systems to change the status of an order. Such as failed or done.
.PARAMETER CombineProductContainerRows
If true, will combine all order rows that are part of a container into a single container row.
.PARAMETER PackingLocationId
The packing place to get orders from.
.OUTPUTS

OrderModelsOrderQuery<PSCustomObject>
#>

function Initialize-OrderModelsOrderQuery {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Updated},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StatusList},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MarketId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PaymentName},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ParcelGroupId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CustomerId},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Email},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Include},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ExternalOrderStatus},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CombineProductContainerRows},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${PackingLocationId}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => OrderModelsOrderQuery' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "Updated" = ${Updated}
            "StatusList" = ${StatusList}
            "MarketId" = ${MarketId}
            "PaymentName" = ${PaymentName}
            "ParcelGroupId" = ${ParcelGroupId}
            "CustomerId" = ${CustomerId}
            "Email" = ${Email}
            "Include" = ${Include}
            "ExternalOrderStatus" = ${ExternalOrderStatus}
            "CombineProductContainerRows" = ${CombineProductContainerRows}
            "PackingLocationId" = ${PackingLocationId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to OrderModelsOrderQuery<PSCustomObject>

.DESCRIPTION

Convert from JSON to OrderModelsOrderQuery<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

OrderModelsOrderQuery<PSCustomObject>
#>
function ConvertFrom-JsonToOrderModelsOrderQuery {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => OrderModelsOrderQuery' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OrderModelsOrderQuery
        $AllProperties = ("Updated", "StatusList", "MarketId", "PaymentName", "ParcelGroupId", "CustomerId", "Email", "Include", "ExternalOrderStatus", "CombineProductContainerRows", "PackingLocationId")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Updated"))) { #optional property not found
            $Updated = $null
        } else {
            $Updated = $JsonParameters.PSobject.Properties["Updated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "StatusList"))) { #optional property not found
            $StatusList = $null
        } else {
            $StatusList = $JsonParameters.PSobject.Properties["StatusList"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "MarketId"))) { #optional property not found
            $MarketId = $null
        } else {
            $MarketId = $JsonParameters.PSobject.Properties["MarketId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PaymentName"))) { #optional property not found
            $PaymentName = $null
        } else {
            $PaymentName = $JsonParameters.PSobject.Properties["PaymentName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ParcelGroupId"))) { #optional property not found
            $ParcelGroupId = $null
        } else {
            $ParcelGroupId = $JsonParameters.PSobject.Properties["ParcelGroupId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CustomerId"))) { #optional property not found
            $CustomerId = $null
        } else {
            $CustomerId = $JsonParameters.PSobject.Properties["CustomerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Email"))) { #optional property not found
            $Email = $null
        } else {
            $Email = $JsonParameters.PSobject.Properties["Email"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Include"))) { #optional property not found
            $Include = $null
        } else {
            $Include = $JsonParameters.PSobject.Properties["Include"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ExternalOrderStatus"))) { #optional property not found
            $ExternalOrderStatus = $null
        } else {
            $ExternalOrderStatus = $JsonParameters.PSobject.Properties["ExternalOrderStatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CombineProductContainerRows"))) { #optional property not found
            $CombineProductContainerRows = $null
        } else {
            $CombineProductContainerRows = $JsonParameters.PSobject.Properties["CombineProductContainerRows"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PackingLocationId"))) { #optional property not found
            $PackingLocationId = $null
        } else {
            $PackingLocationId = $JsonParameters.PSobject.Properties["PackingLocationId"].value
        }

        $PSO = [PSCustomObject]@{
            "Updated" = ${Updated}
            "StatusList" = ${StatusList}
            "MarketId" = ${MarketId}
            "PaymentName" = ${PaymentName}
            "ParcelGroupId" = ${ParcelGroupId}
            "CustomerId" = ${CustomerId}
            "Email" = ${Email}
            "Include" = ${Include}
            "ExternalOrderStatus" = ${ExternalOrderStatus}
            "CombineProductContainerRows" = ${CombineProductContainerRows}
            "PackingLocationId" = ${PackingLocationId}
        }

        return $PSO
    }

}

