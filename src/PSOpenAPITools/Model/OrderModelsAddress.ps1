#
# Geins Management API
#  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
# Version: v1.7
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Data carrier for an address

.PARAMETER Company
Company name
.PARAMETER CareOf
Care of. C/O
.PARAMETER State
ISO code or name of the state, province or district
.PARAMETER Country
ISO code of the country
.PARAMETER FirstName
The first part(s) of the customer name
.PARAMETER LastName
The last part(s), or family name of the customer
.PARAMETER Email
The email of the customer
.PARAMETER AddressLine1
The first line of the address, usually street and house number
.PARAMETER AddressLine2
The second line of the address.
.PARAMETER AddressLine3
The third line of the address.
.PARAMETER Zip
The postal / zip code.
.PARAMETER City
The city.
.PARAMETER Phone
The (land-line) phone number of the customer
.PARAMETER Mobile
The SMS-capable number of the customer
.PARAMETER EntryCode
The delivery address entry code, if needed for successful delivery
.OUTPUTS

OrderModelsAddress<PSCustomObject>
#>

function Initialize-OrderModelsAddress {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Company},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CareOf},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${State},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Country},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FirstName},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LastName},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Email},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AddressLine1},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AddressLine2},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AddressLine3},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Zip},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${City},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Phone},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Mobile},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EntryCode}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => OrderModelsAddress' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "Company" = ${Company}
            "CareOf" = ${CareOf}
            "State" = ${State}
            "Country" = ${Country}
            "FirstName" = ${FirstName}
            "LastName" = ${LastName}
            "Email" = ${Email}
            "AddressLine1" = ${AddressLine1}
            "AddressLine2" = ${AddressLine2}
            "AddressLine3" = ${AddressLine3}
            "Zip" = ${Zip}
            "City" = ${City}
            "Phone" = ${Phone}
            "Mobile" = ${Mobile}
            "EntryCode" = ${EntryCode}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to OrderModelsAddress<PSCustomObject>

.DESCRIPTION

Convert from JSON to OrderModelsAddress<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

OrderModelsAddress<PSCustomObject>
#>
function ConvertFrom-JsonToOrderModelsAddress {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => OrderModelsAddress' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OrderModelsAddress
        $AllProperties = ("Company", "CareOf", "State", "Country", "FirstName", "LastName", "Email", "AddressLine1", "AddressLine2", "AddressLine3", "Zip", "City", "Phone", "Mobile", "EntryCode")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Company"))) { #optional property not found
            $Company = $null
        } else {
            $Company = $JsonParameters.PSobject.Properties["Company"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CareOf"))) { #optional property not found
            $CareOf = $null
        } else {
            $CareOf = $JsonParameters.PSobject.Properties["CareOf"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "State"))) { #optional property not found
            $State = $null
        } else {
            $State = $JsonParameters.PSobject.Properties["State"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Country"))) { #optional property not found
            $Country = $null
        } else {
            $Country = $JsonParameters.PSobject.Properties["Country"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "FirstName"))) { #optional property not found
            $FirstName = $null
        } else {
            $FirstName = $JsonParameters.PSobject.Properties["FirstName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "LastName"))) { #optional property not found
            $LastName = $null
        } else {
            $LastName = $JsonParameters.PSobject.Properties["LastName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Email"))) { #optional property not found
            $Email = $null
        } else {
            $Email = $JsonParameters.PSobject.Properties["Email"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "AddressLine1"))) { #optional property not found
            $AddressLine1 = $null
        } else {
            $AddressLine1 = $JsonParameters.PSobject.Properties["AddressLine1"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "AddressLine2"))) { #optional property not found
            $AddressLine2 = $null
        } else {
            $AddressLine2 = $JsonParameters.PSobject.Properties["AddressLine2"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "AddressLine3"))) { #optional property not found
            $AddressLine3 = $null
        } else {
            $AddressLine3 = $JsonParameters.PSobject.Properties["AddressLine3"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Zip"))) { #optional property not found
            $Zip = $null
        } else {
            $Zip = $JsonParameters.PSobject.Properties["Zip"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "City"))) { #optional property not found
            $City = $null
        } else {
            $City = $JsonParameters.PSobject.Properties["City"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Phone"))) { #optional property not found
            $Phone = $null
        } else {
            $Phone = $JsonParameters.PSobject.Properties["Phone"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Mobile"))) { #optional property not found
            $Mobile = $null
        } else {
            $Mobile = $JsonParameters.PSobject.Properties["Mobile"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "EntryCode"))) { #optional property not found
            $EntryCode = $null
        } else {
            $EntryCode = $JsonParameters.PSobject.Properties["EntryCode"].value
        }

        $PSO = [PSCustomObject]@{
            "Company" = ${Company}
            "CareOf" = ${CareOf}
            "State" = ${State}
            "Country" = ${Country}
            "FirstName" = ${FirstName}
            "LastName" = ${LastName}
            "Email" = ${Email}
            "AddressLine1" = ${AddressLine1}
            "AddressLine2" = ${AddressLine2}
            "AddressLine3" = ${AddressLine3}
            "Zip" = ${Zip}
            "City" = ${City}
            "Phone" = ${Phone}
            "Mobile" = ${Mobile}
            "EntryCode" = ${EntryCode}
        }

        return $PSO
    }

}

