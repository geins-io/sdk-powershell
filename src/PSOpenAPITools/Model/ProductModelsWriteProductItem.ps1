#
# Geins Management API
#  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
# Version: v1.7
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

A product item belonging to a product.

.PARAMETER ItemId
Id of the product item.
.PARAMETER ArticleNumber
The article number for the product item.
.PARAMETER Name
The name of the product item.
.PARAMETER Shelf
The shelf name where the product item can be found.
.PARAMETER Weight
The weight of the item in grams (g).
.PARAMETER Length
The length of the item in millimeters (mm).
.PARAMETER Width
The width of the item in millimeters (mm).
.PARAMETER Height
The height of the item in millimeters (mm).
.PARAMETER Gtin
The GTIN number for the item.
.PARAMETER Active
The current state of the item.
.PARAMETER ExternalId
External Id of the product item.
.OUTPUTS

ProductModelsWriteProductItem<PSCustomObject>
#>

function Initialize-ProductModelsWriteProductItem {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ItemId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ArticleNumber},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Shelf},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Weight},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Length},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Width},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Height},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Gtin},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Active},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExternalId}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ProductModelsWriteProductItem' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "ItemId" = ${ItemId}
            "ArticleNumber" = ${ArticleNumber}
            "Name" = ${Name}
            "Shelf" = ${Shelf}
            "Weight" = ${Weight}
            "Length" = ${Length}
            "Width" = ${Width}
            "Height" = ${Height}
            "Gtin" = ${Gtin}
            "Active" = ${Active}
            "ExternalId" = ${ExternalId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ProductModelsWriteProductItem<PSCustomObject>

.DESCRIPTION

Convert from JSON to ProductModelsWriteProductItem<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ProductModelsWriteProductItem<PSCustomObject>
#>
function ConvertFrom-JsonToProductModelsWriteProductItem {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ProductModelsWriteProductItem' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ProductModelsWriteProductItem
        $AllProperties = ("ItemId", "ArticleNumber", "Name", "Shelf", "Weight", "Length", "Width", "Height", "Gtin", "Active", "ExternalId")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ItemId"))) { #optional property not found
            $ItemId = $null
        } else {
            $ItemId = $JsonParameters.PSobject.Properties["ItemId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ArticleNumber"))) { #optional property not found
            $ArticleNumber = $null
        } else {
            $ArticleNumber = $JsonParameters.PSobject.Properties["ArticleNumber"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["Name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Shelf"))) { #optional property not found
            $Shelf = $null
        } else {
            $Shelf = $JsonParameters.PSobject.Properties["Shelf"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Weight"))) { #optional property not found
            $Weight = $null
        } else {
            $Weight = $JsonParameters.PSobject.Properties["Weight"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Length"))) { #optional property not found
            $Length = $null
        } else {
            $Length = $JsonParameters.PSobject.Properties["Length"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Width"))) { #optional property not found
            $Width = $null
        } else {
            $Width = $JsonParameters.PSobject.Properties["Width"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Height"))) { #optional property not found
            $Height = $null
        } else {
            $Height = $JsonParameters.PSobject.Properties["Height"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Gtin"))) { #optional property not found
            $Gtin = $null
        } else {
            $Gtin = $JsonParameters.PSobject.Properties["Gtin"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Active"))) { #optional property not found
            $Active = $null
        } else {
            $Active = $JsonParameters.PSobject.Properties["Active"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ExternalId"))) { #optional property not found
            $ExternalId = $null
        } else {
            $ExternalId = $JsonParameters.PSobject.Properties["ExternalId"].value
        }

        $PSO = [PSCustomObject]@{
            "ItemId" = ${ItemId}
            "ArticleNumber" = ${ArticleNumber}
            "Name" = ${Name}
            "Shelf" = ${Shelf}
            "Weight" = ${Weight}
            "Length" = ${Length}
            "Width" = ${Width}
            "Height" = ${Height}
            "Gtin" = ${Gtin}
            "Active" = ${Active}
            "ExternalId" = ${ExternalId}
        }

        return $PSO
    }

}

