#
# Geins Management API
#  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
# Version: v1.7
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Data carrier for an order.

.PARAMETER Id
The unique identifier for this order.
.PARAMETER ExternalId
The unique external identifier for this order.
.PARAMETER PersonalId
The social security number, or organisational number of the customer.
.PARAMETER CustomerId
The unique identifier of the customer placing this order.
.PARAMETER CustomerTypeId
Customer type. Usually 1 for private customers and 2 for companies. This field is customer specific
.PARAMETER CreatedAt
Datetime when the order was created.
.PARAMETER UpdatedAt
Datetime when the order was last updated.
.PARAMETER CompletedAt
The DateTime when the order was completed (delivered, payed).
.PARAMETER Status
The order status. Possbile values: cancelled, on-hold, inactive, refunded, partial,  pending-payment, out-of-stock, backorder, completed, pending.
.PARAMETER Currency
ISO Currency code.
.PARAMETER CurrencyRate
The Currency Rate to SEK.
.PARAMETER MarketId
The unique identifier for the market this order originates from.
.PARAMETER MarketName
The market name. Usually this is the equal to the site name.
.PARAMETER Language
Two-letter Language code.
.PARAMETER OrderTotal
Order total.
.PARAMETER ExpectedSum
Expected total sum to be paid after discount and balance.   <para>The value is usually taken directly from the payment provider and represents the actual reserved amount.</para><para>If this differs from OrderTotal, actions should be taken to ensure they match. This usually happens due to rounding.</para>
.PARAMETER VATTotal
Order VAT total.
.PARAMETER OrderValueIncVat
Order value inc vat after discount but before balance
.PARAMETER OrderValueExVat
Order value ex vat after discount but before balance
.PARAMETER ItemValueIncVat
Item value inc vat excluding fees and discount
.PARAMETER ItemValueExVat
Item value ex vat excluding fees and discount
.PARAMETER Discount
Total discount inc vat.
.PARAMETER DiscountExVat
Total discount ex vat.
.PARAMETER FromBalance
The amount which was withdrawn from the customers balance inc vat.
.PARAMETER ShippingFee
Shipping fee inc vat.
.PARAMETER ShippingFeeExVat
Shipping fee ex vat.
.PARAMETER PaymentFee
Payment fee inc vat.
.PARAMETER PaymentFeeExVat
Payment fee ex vat.
.PARAMETER Message
Order message. Can contain instructions from customer or added details about the order.
.PARAMETER OrderMessages
Internal order messages. Can contain internal details about the order.
.PARAMETER PaymentDetails
List of payment details <seealso cref=""T:Order.Models.PaymentDetail"" />.
.PARAMETER ShippingDetails
List of shipping details <seealso cref=""T:Order.Models.ShippingDetail"" />.
.PARAMETER ShippingAddress
No description available.
.PARAMETER BillingAddress
No description available.
.PARAMETER Rows
List of order rows
.PARAMETER Refunds
List of order refunds <seealso cref=""T:Order.Models.Refund"" />.
.PARAMETER Ip
Customer IP-number.
.PARAMETER UserAgent
Customer User Agent.
.PARAMETER ServiceLocation
Chosen service location.
.PARAMETER CampaignCode
Campaign code applied to the order.
.PARAMETER CampaignCodeId
The internal id of the applied campaign code.
.PARAMETER Percent
General percent discount applied to the order.
.PARAMETER DesiredDeliveryDate
The desired delivery date of the order.
.PARAMETER Gender
The gender of the customer. True = male, False = female, null = unknown.
.PARAMETER CartId
The unique identifier for the cart from which this order originates.
.PARAMETER SessionId
The session id for the from which this order originates.
.PARAMETER ExternalOrderStatus
No description available.
.PARAMETER CampaignIds
The ids for the campaigns applied to this order (not rows)
.PARAMETER CampaignNames
The names for the campaigns applied to this order (not rows)
.PARAMETER MetaData
The order meta data to store additional information about the order. Eg. customer specific shipping data to include for nShift checkout (former UDC) shipments
.PARAMETER PublicId
The public id of this order.
.OUTPUTS

OrderModelsOrder<PSCustomObject>
#>

function Initialize-OrderModelsOrder {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExternalId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PersonalId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CustomerId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CustomerTypeId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${CreatedAt},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${UpdatedAt},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${CompletedAt},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Status},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Currency},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${CurrencyRate},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MarketId},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MarketName},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Language},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${OrderTotal},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${ExpectedSum},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${VATTotal},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${OrderValueIncVat},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${OrderValueExVat},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${ItemValueIncVat},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${ItemValueExVat},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Discount},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${DiscountExVat},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${FromBalance},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${ShippingFee},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${ShippingFeeExVat},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${PaymentFee},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${PaymentFeeExVat},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Message},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${OrderMessages},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${PaymentDetails},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ShippingDetails},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ShippingAddress},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${BillingAddress},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Rows},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Refunds},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Ip},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UserAgent},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ServiceLocation},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CampaignCode},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CampaignCodeId},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Percent},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DesiredDeliveryDate},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Gender},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CartId},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SessionId},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("0", "10", "20", "30", "40")]
        [System.Nullable[Int32]]
        ${ExternalOrderStatus},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${CampaignIds},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${CampaignNames},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${MetaData},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PublicId}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => OrderModelsOrder' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "Id" = ${Id}
            "ExternalId" = ${ExternalId}
            "PersonalId" = ${PersonalId}
            "CustomerId" = ${CustomerId}
            "CustomerTypeId" = ${CustomerTypeId}
            "CreatedAt" = ${CreatedAt}
            "UpdatedAt" = ${UpdatedAt}
            "CompletedAt" = ${CompletedAt}
            "Status" = ${Status}
            "Currency" = ${Currency}
            "CurrencyRate" = ${CurrencyRate}
            "MarketId" = ${MarketId}
            "MarketName" = ${MarketName}
            "Language" = ${Language}
            "OrderTotal" = ${OrderTotal}
            "ExpectedSum" = ${ExpectedSum}
            "VATTotal" = ${VATTotal}
            "OrderValueIncVat" = ${OrderValueIncVat}
            "OrderValueExVat" = ${OrderValueExVat}
            "ItemValueIncVat" = ${ItemValueIncVat}
            "ItemValueExVat" = ${ItemValueExVat}
            "Discount" = ${Discount}
            "DiscountExVat" = ${DiscountExVat}
            "FromBalance" = ${FromBalance}
            "ShippingFee" = ${ShippingFee}
            "ShippingFeeExVat" = ${ShippingFeeExVat}
            "PaymentFee" = ${PaymentFee}
            "PaymentFeeExVat" = ${PaymentFeeExVat}
            "Message" = ${Message}
            "OrderMessages" = ${OrderMessages}
            "PaymentDetails" = ${PaymentDetails}
            "ShippingDetails" = ${ShippingDetails}
            "ShippingAddress" = ${ShippingAddress}
            "BillingAddress" = ${BillingAddress}
            "Rows" = ${Rows}
            "Refunds" = ${Refunds}
            "Ip" = ${Ip}
            "UserAgent" = ${UserAgent}
            "ServiceLocation" = ${ServiceLocation}
            "CampaignCode" = ${CampaignCode}
            "CampaignCodeId" = ${CampaignCodeId}
            "Percent" = ${Percent}
            "DesiredDeliveryDate" = ${DesiredDeliveryDate}
            "Gender" = ${Gender}
            "CartId" = ${CartId}
            "SessionId" = ${SessionId}
            "ExternalOrderStatus" = ${ExternalOrderStatus}
            "CampaignIds" = ${CampaignIds}
            "CampaignNames" = ${CampaignNames}
            "MetaData" = ${MetaData}
            "PublicId" = ${PublicId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to OrderModelsOrder<PSCustomObject>

.DESCRIPTION

Convert from JSON to OrderModelsOrder<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

OrderModelsOrder<PSCustomObject>
#>
function ConvertFrom-JsonToOrderModelsOrder {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => OrderModelsOrder' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OrderModelsOrder
        $AllProperties = ("Id", "ExternalId", "PersonalId", "CustomerId", "CustomerTypeId", "CreatedAt", "UpdatedAt", "CompletedAt", "Status", "Currency", "CurrencyRate", "MarketId", "MarketName", "Language", "OrderTotal", "ExpectedSum", "VATTotal", "OrderValueIncVat", "OrderValueExVat", "ItemValueIncVat", "ItemValueExVat", "Discount", "DiscountExVat", "FromBalance", "ShippingFee", "ShippingFeeExVat", "PaymentFee", "PaymentFeeExVat", "Message", "OrderMessages", "PaymentDetails", "ShippingDetails", "ShippingAddress", "BillingAddress", "Rows", "Refunds", "Ip", "UserAgent", "ServiceLocation", "CampaignCode", "CampaignCodeId", "Percent", "DesiredDeliveryDate", "Gender", "CartId", "SessionId", "ExternalOrderStatus", "CampaignIds", "CampaignNames", "MetaData", "PublicId")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["Id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ExternalId"))) { #optional property not found
            $ExternalId = $null
        } else {
            $ExternalId = $JsonParameters.PSobject.Properties["ExternalId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PersonalId"))) { #optional property not found
            $PersonalId = $null
        } else {
            $PersonalId = $JsonParameters.PSobject.Properties["PersonalId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CustomerId"))) { #optional property not found
            $CustomerId = $null
        } else {
            $CustomerId = $JsonParameters.PSobject.Properties["CustomerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CustomerTypeId"))) { #optional property not found
            $CustomerTypeId = $null
        } else {
            $CustomerTypeId = $JsonParameters.PSobject.Properties["CustomerTypeId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CreatedAt"))) { #optional property not found
            $CreatedAt = $null
        } else {
            $CreatedAt = $JsonParameters.PSobject.Properties["CreatedAt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "UpdatedAt"))) { #optional property not found
            $UpdatedAt = $null
        } else {
            $UpdatedAt = $JsonParameters.PSobject.Properties["UpdatedAt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CompletedAt"))) { #optional property not found
            $CompletedAt = $null
        } else {
            $CompletedAt = $JsonParameters.PSobject.Properties["CompletedAt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["Status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Currency"))) { #optional property not found
            $Currency = $null
        } else {
            $Currency = $JsonParameters.PSobject.Properties["Currency"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CurrencyRate"))) { #optional property not found
            $CurrencyRate = $null
        } else {
            $CurrencyRate = $JsonParameters.PSobject.Properties["CurrencyRate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "MarketId"))) { #optional property not found
            $MarketId = $null
        } else {
            $MarketId = $JsonParameters.PSobject.Properties["MarketId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "MarketName"))) { #optional property not found
            $MarketName = $null
        } else {
            $MarketName = $JsonParameters.PSobject.Properties["MarketName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Language"))) { #optional property not found
            $Language = $null
        } else {
            $Language = $JsonParameters.PSobject.Properties["Language"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "OrderTotal"))) { #optional property not found
            $OrderTotal = $null
        } else {
            $OrderTotal = $JsonParameters.PSobject.Properties["OrderTotal"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ExpectedSum"))) { #optional property not found
            $ExpectedSum = $null
        } else {
            $ExpectedSum = $JsonParameters.PSobject.Properties["ExpectedSum"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "VATTotal"))) { #optional property not found
            $VATTotal = $null
        } else {
            $VATTotal = $JsonParameters.PSobject.Properties["VATTotal"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "OrderValueIncVat"))) { #optional property not found
            $OrderValueIncVat = $null
        } else {
            $OrderValueIncVat = $JsonParameters.PSobject.Properties["OrderValueIncVat"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "OrderValueExVat"))) { #optional property not found
            $OrderValueExVat = $null
        } else {
            $OrderValueExVat = $JsonParameters.PSobject.Properties["OrderValueExVat"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ItemValueIncVat"))) { #optional property not found
            $ItemValueIncVat = $null
        } else {
            $ItemValueIncVat = $JsonParameters.PSobject.Properties["ItemValueIncVat"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ItemValueExVat"))) { #optional property not found
            $ItemValueExVat = $null
        } else {
            $ItemValueExVat = $JsonParameters.PSobject.Properties["ItemValueExVat"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Discount"))) { #optional property not found
            $Discount = $null
        } else {
            $Discount = $JsonParameters.PSobject.Properties["Discount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "DiscountExVat"))) { #optional property not found
            $DiscountExVat = $null
        } else {
            $DiscountExVat = $JsonParameters.PSobject.Properties["DiscountExVat"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "FromBalance"))) { #optional property not found
            $FromBalance = $null
        } else {
            $FromBalance = $JsonParameters.PSobject.Properties["FromBalance"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ShippingFee"))) { #optional property not found
            $ShippingFee = $null
        } else {
            $ShippingFee = $JsonParameters.PSobject.Properties["ShippingFee"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ShippingFeeExVat"))) { #optional property not found
            $ShippingFeeExVat = $null
        } else {
            $ShippingFeeExVat = $JsonParameters.PSobject.Properties["ShippingFeeExVat"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PaymentFee"))) { #optional property not found
            $PaymentFee = $null
        } else {
            $PaymentFee = $JsonParameters.PSobject.Properties["PaymentFee"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PaymentFeeExVat"))) { #optional property not found
            $PaymentFeeExVat = $null
        } else {
            $PaymentFeeExVat = $JsonParameters.PSobject.Properties["PaymentFeeExVat"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Message"))) { #optional property not found
            $Message = $null
        } else {
            $Message = $JsonParameters.PSobject.Properties["Message"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "OrderMessages"))) { #optional property not found
            $OrderMessages = $null
        } else {
            $OrderMessages = $JsonParameters.PSobject.Properties["OrderMessages"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PaymentDetails"))) { #optional property not found
            $PaymentDetails = $null
        } else {
            $PaymentDetails = $JsonParameters.PSobject.Properties["PaymentDetails"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ShippingDetails"))) { #optional property not found
            $ShippingDetails = $null
        } else {
            $ShippingDetails = $JsonParameters.PSobject.Properties["ShippingDetails"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ShippingAddress"))) { #optional property not found
            $ShippingAddress = $null
        } else {
            $ShippingAddress = $JsonParameters.PSobject.Properties["ShippingAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "BillingAddress"))) { #optional property not found
            $BillingAddress = $null
        } else {
            $BillingAddress = $JsonParameters.PSobject.Properties["BillingAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Rows"))) { #optional property not found
            $Rows = $null
        } else {
            $Rows = $JsonParameters.PSobject.Properties["Rows"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Refunds"))) { #optional property not found
            $Refunds = $null
        } else {
            $Refunds = $JsonParameters.PSobject.Properties["Refunds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Ip"))) { #optional property not found
            $Ip = $null
        } else {
            $Ip = $JsonParameters.PSobject.Properties["Ip"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "UserAgent"))) { #optional property not found
            $UserAgent = $null
        } else {
            $UserAgent = $JsonParameters.PSobject.Properties["UserAgent"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ServiceLocation"))) { #optional property not found
            $ServiceLocation = $null
        } else {
            $ServiceLocation = $JsonParameters.PSobject.Properties["ServiceLocation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CampaignCode"))) { #optional property not found
            $CampaignCode = $null
        } else {
            $CampaignCode = $JsonParameters.PSobject.Properties["CampaignCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CampaignCodeId"))) { #optional property not found
            $CampaignCodeId = $null
        } else {
            $CampaignCodeId = $JsonParameters.PSobject.Properties["CampaignCodeId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Percent"))) { #optional property not found
            $Percent = $null
        } else {
            $Percent = $JsonParameters.PSobject.Properties["Percent"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "DesiredDeliveryDate"))) { #optional property not found
            $DesiredDeliveryDate = $null
        } else {
            $DesiredDeliveryDate = $JsonParameters.PSobject.Properties["DesiredDeliveryDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Gender"))) { #optional property not found
            $Gender = $null
        } else {
            $Gender = $JsonParameters.PSobject.Properties["Gender"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CartId"))) { #optional property not found
            $CartId = $null
        } else {
            $CartId = $JsonParameters.PSobject.Properties["CartId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SessionId"))) { #optional property not found
            $SessionId = $null
        } else {
            $SessionId = $JsonParameters.PSobject.Properties["SessionId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ExternalOrderStatus"))) { #optional property not found
            $ExternalOrderStatus = $null
        } else {
            $ExternalOrderStatus = $JsonParameters.PSobject.Properties["ExternalOrderStatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CampaignIds"))) { #optional property not found
            $CampaignIds = $null
        } else {
            $CampaignIds = $JsonParameters.PSobject.Properties["CampaignIds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CampaignNames"))) { #optional property not found
            $CampaignNames = $null
        } else {
            $CampaignNames = $JsonParameters.PSobject.Properties["CampaignNames"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "MetaData"))) { #optional property not found
            $MetaData = $null
        } else {
            $MetaData = $JsonParameters.PSobject.Properties["MetaData"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PublicId"))) { #optional property not found
            $PublicId = $null
        } else {
            $PublicId = $JsonParameters.PSobject.Properties["PublicId"].value
        }

        $PSO = [PSCustomObject]@{
            "Id" = ${Id}
            "ExternalId" = ${ExternalId}
            "PersonalId" = ${PersonalId}
            "CustomerId" = ${CustomerId}
            "CustomerTypeId" = ${CustomerTypeId}
            "CreatedAt" = ${CreatedAt}
            "UpdatedAt" = ${UpdatedAt}
            "CompletedAt" = ${CompletedAt}
            "Status" = ${Status}
            "Currency" = ${Currency}
            "CurrencyRate" = ${CurrencyRate}
            "MarketId" = ${MarketId}
            "MarketName" = ${MarketName}
            "Language" = ${Language}
            "OrderTotal" = ${OrderTotal}
            "ExpectedSum" = ${ExpectedSum}
            "VATTotal" = ${VATTotal}
            "OrderValueIncVat" = ${OrderValueIncVat}
            "OrderValueExVat" = ${OrderValueExVat}
            "ItemValueIncVat" = ${ItemValueIncVat}
            "ItemValueExVat" = ${ItemValueExVat}
            "Discount" = ${Discount}
            "DiscountExVat" = ${DiscountExVat}
            "FromBalance" = ${FromBalance}
            "ShippingFee" = ${ShippingFee}
            "ShippingFeeExVat" = ${ShippingFeeExVat}
            "PaymentFee" = ${PaymentFee}
            "PaymentFeeExVat" = ${PaymentFeeExVat}
            "Message" = ${Message}
            "OrderMessages" = ${OrderMessages}
            "PaymentDetails" = ${PaymentDetails}
            "ShippingDetails" = ${ShippingDetails}
            "ShippingAddress" = ${ShippingAddress}
            "BillingAddress" = ${BillingAddress}
            "Rows" = ${Rows}
            "Refunds" = ${Refunds}
            "Ip" = ${Ip}
            "UserAgent" = ${UserAgent}
            "ServiceLocation" = ${ServiceLocation}
            "CampaignCode" = ${CampaignCode}
            "CampaignCodeId" = ${CampaignCodeId}
            "Percent" = ${Percent}
            "DesiredDeliveryDate" = ${DesiredDeliveryDate}
            "Gender" = ${Gender}
            "CartId" = ${CartId}
            "SessionId" = ${SessionId}
            "ExternalOrderStatus" = ${ExternalOrderStatus}
            "CampaignIds" = ${CampaignIds}
            "CampaignNames" = ${CampaignNames}
            "MetaData" = ${MetaData}
            "PublicId" = ${PublicId}
        }

        return $PSO
    }

}

