#
# Geins Management API
#  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
# Version: v1.7
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

This class represents a collection of widgets, and defines how they should be layouted in the area they are rendered in.

.PARAMETER Id
The primary ID of this container
.PARAMETER Name
The descriptive user defined name of this container, which is used to distinguish this container in a container library
.PARAMETER ClassNames
The CSS class names this container should use.
.PARAMETER Active
No description available.
.PARAMETER Layout
No description available.
.PARAMETER ResponsiveMode
No description available.
.PARAMETER Visibility
No description available.
.PARAMETER Design
No description available.
.PARAMETER Widgets
The configured widgets held by this container
.OUTPUTS

PageAreaModelsReadPageWidgetContainer<PSCustomObject>
#>

function Initialize-PageAreaModelsReadPageWidgetContainer {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${ClassNames},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Active},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Layout},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResponsiveMode},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Visibility},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Design},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Widgets}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => PageAreaModelsReadPageWidgetContainer' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "Id" = ${Id}
            "Name" = ${Name}
            "ClassNames" = ${ClassNames}
            "Active" = ${Active}
            "Layout" = ${Layout}
            "ResponsiveMode" = ${ResponsiveMode}
            "Visibility" = ${Visibility}
            "Design" = ${Design}
            "Widgets" = ${Widgets}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PageAreaModelsReadPageWidgetContainer<PSCustomObject>

.DESCRIPTION

Convert from JSON to PageAreaModelsReadPageWidgetContainer<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PageAreaModelsReadPageWidgetContainer<PSCustomObject>
#>
function ConvertFrom-JsonToPageAreaModelsReadPageWidgetContainer {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => PageAreaModelsReadPageWidgetContainer' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PageAreaModelsReadPageWidgetContainer
        $AllProperties = ("Id", "Name", "ClassNames", "Active", "Layout", "ResponsiveMode", "Visibility", "Design", "Widgets")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["Id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["Name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ClassNames"))) { #optional property not found
            $ClassNames = $null
        } else {
            $ClassNames = $JsonParameters.PSobject.Properties["ClassNames"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Active"))) { #optional property not found
            $Active = $null
        } else {
            $Active = $JsonParameters.PSobject.Properties["Active"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Layout"))) { #optional property not found
            $Layout = $null
        } else {
            $Layout = $JsonParameters.PSobject.Properties["Layout"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ResponsiveMode"))) { #optional property not found
            $ResponsiveMode = $null
        } else {
            $ResponsiveMode = $JsonParameters.PSobject.Properties["ResponsiveMode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Visibility"))) { #optional property not found
            $Visibility = $null
        } else {
            $Visibility = $JsonParameters.PSobject.Properties["Visibility"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Design"))) { #optional property not found
            $Design = $null
        } else {
            $Design = $JsonParameters.PSobject.Properties["Design"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Widgets"))) { #optional property not found
            $Widgets = $null
        } else {
            $Widgets = $JsonParameters.PSobject.Properties["Widgets"].value
        }

        $PSO = [PSCustomObject]@{
            "Id" = ${Id}
            "Name" = ${Name}
            "ClassNames" = ${ClassNames}
            "Active" = ${Active}
            "Layout" = ${Layout}
            "ResponsiveMode" = ${ResponsiveMode}
            "Visibility" = ${Visibility}
            "Design" = ${Design}
            "Widgets" = ${Widgets}
        }

        return $PSO
    }

}

