#
# Geins Management API
#  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
# Version: v1.7
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

A parameter value for a product.

.PARAMETER ParameterValueId
The unique identifier of this parameter value.
.PARAMETER ProductId
The product id of the parameter.
.PARAMETER ParameterId
The unique identifier of the parameter that this value belongs to.
.PARAMETER ParameterName
The non-localized name of the parameter.
.PARAMETER GroupId
The unique identifier of the group that this parameter belongs to.
.PARAMETER GroupName
The name of the group that this parameter belongs to.
.PARAMETER ParameterType
The type of parameter.
.PARAMETER Value
The identifying value of the parameter.
.PARAMETER Description
The non-localized description of the parameter.
.PARAMETER LocalizedDescriptions
The localized descriptions of the parameter.
.PARAMETER InternalIdentifier
The internal identifier of the parameter.
.OUTPUTS

ProductParameterModelsReadProductParameterValue<PSCustomObject>
#>

function Initialize-ProductParameterModelsReadProductParameterValue {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ParameterValueId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ProductId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ParameterId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ParameterName},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${GroupId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${GroupName},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("1", "2", "3", "4", "5", "6", "7")]
        [System.Nullable[Int32]]
        ${ParameterType},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Value},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${LocalizedDescriptions},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InternalIdentifier}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ProductParameterModelsReadProductParameterValue' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "ParameterValueId" = ${ParameterValueId}
            "ProductId" = ${ProductId}
            "ParameterId" = ${ParameterId}
            "ParameterName" = ${ParameterName}
            "GroupId" = ${GroupId}
            "GroupName" = ${GroupName}
            "ParameterType" = ${ParameterType}
            "Value" = ${Value}
            "Description" = ${Description}
            "LocalizedDescriptions" = ${LocalizedDescriptions}
            "InternalIdentifier" = ${InternalIdentifier}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ProductParameterModelsReadProductParameterValue<PSCustomObject>

.DESCRIPTION

Convert from JSON to ProductParameterModelsReadProductParameterValue<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ProductParameterModelsReadProductParameterValue<PSCustomObject>
#>
function ConvertFrom-JsonToProductParameterModelsReadProductParameterValue {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ProductParameterModelsReadProductParameterValue' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ProductParameterModelsReadProductParameterValue
        $AllProperties = ("ParameterValueId", "ProductId", "ParameterId", "ParameterName", "GroupId", "GroupName", "ParameterType", "Value", "Description", "LocalizedDescriptions", "InternalIdentifier")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ParameterValueId"))) { #optional property not found
            $ParameterValueId = $null
        } else {
            $ParameterValueId = $JsonParameters.PSobject.Properties["ParameterValueId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ProductId"))) { #optional property not found
            $ProductId = $null
        } else {
            $ProductId = $JsonParameters.PSobject.Properties["ProductId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ParameterId"))) { #optional property not found
            $ParameterId = $null
        } else {
            $ParameterId = $JsonParameters.PSobject.Properties["ParameterId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ParameterName"))) { #optional property not found
            $ParameterName = $null
        } else {
            $ParameterName = $JsonParameters.PSobject.Properties["ParameterName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "GroupId"))) { #optional property not found
            $GroupId = $null
        } else {
            $GroupId = $JsonParameters.PSobject.Properties["GroupId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "GroupName"))) { #optional property not found
            $GroupName = $null
        } else {
            $GroupName = $JsonParameters.PSobject.Properties["GroupName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ParameterType"))) { #optional property not found
            $ParameterType = $null
        } else {
            $ParameterType = $JsonParameters.PSobject.Properties["ParameterType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Value"))) { #optional property not found
            $Value = $null
        } else {
            $Value = $JsonParameters.PSobject.Properties["Value"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["Description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "LocalizedDescriptions"))) { #optional property not found
            $LocalizedDescriptions = $null
        } else {
            $LocalizedDescriptions = $JsonParameters.PSobject.Properties["LocalizedDescriptions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "InternalIdentifier"))) { #optional property not found
            $InternalIdentifier = $null
        } else {
            $InternalIdentifier = $JsonParameters.PSobject.Properties["InternalIdentifier"].value
        }

        $PSO = [PSCustomObject]@{
            "ParameterValueId" = ${ParameterValueId}
            "ProductId" = ${ProductId}
            "ParameterId" = ${ParameterId}
            "ParameterName" = ${ParameterName}
            "GroupId" = ${GroupId}
            "GroupName" = ${GroupName}
            "ParameterType" = ${ParameterType}
            "Value" = ${Value}
            "Description" = ${Description}
            "LocalizedDescriptions" = ${LocalizedDescriptions}
            "InternalIdentifier" = ${InternalIdentifier}
        }

        return $PSO
    }

}

