#
# Geins Management API
#  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
# Version: v1.7
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

A product.

.PARAMETER ProductId
The unique identifier for the product.
.PARAMETER ArticleNumber
The article number of the product.
.PARAMETER Names
The localized names of the product.
.PARAMETER DateCreated
The date the product was created.
.PARAMETER DateUpdated
The date the product was last updated.
.PARAMETER Active
The current state of the product.
.PARAMETER PurchasePrice
The purchase price in the currency defined in {Product.Models.Read.Product.PurchasePriceCurrency}.
.PARAMETER PurchasePriceCurrency
The 3-letter ISO 4217 currency code for the amount given in {Product.Models.Read.Product.PurchasePrice}.
.PARAMETER ShortTexts
Localized short texts for the product.
.PARAMETER LongTexts
Localized long texts for the product.
.PARAMETER TechTexts
Localized tech texts for the product.
.PARAMETER Items
The items belonging to the product.
.PARAMETER Prices
The current prices of the product.
.PARAMETER Categories
The categories the product belongs to.
.PARAMETER Images
The images for the product
.PARAMETER BrandId
The brand id of the product.
.PARAMETER BrandName
The brand name of the product.
.PARAMETER SupplierId
The supplier id of the product.
.PARAMETER SupplierName
The supplier name of the product.
.PARAMETER ParameterValues
The parameter values associated with the product.
.PARAMETER Variants
The variants for this product.
.PARAMETER Markets
The markets for this product
.PARAMETER Vat
The vat percent for this product. Eg) 0.25 meaning 25% VAT.
.PARAMETER PrimaryImage
The filename of this products primary image.
.PARAMETER FreightClassId
ID of freight class
.PARAMETER IntrastatCode
Intrastat code of the product
.PARAMETER CountryOfOrigin
Country of orgin of product
.PARAMETER VariantGroupId
ID of Variant Group to which the product is associated
.PARAMETER VatId
ID of Vat
.PARAMETER ExternalId
External Id of the product.
.PARAMETER ActivationDate
Activation date for the product.
.PARAMETER Feeds
The feeds the product is a member of
.PARAMETER Urls
All canonical urls for the product
.PARAMETER MainCategoryId
The main category id for the product.
.PARAMETER RelatedProducts
The related products for the product.
.OUTPUTS

ProductModelsReadProduct<PSCustomObject>
#>

function Initialize-ProductModelsReadProduct {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ProductId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ArticleNumber},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Names},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DateCreated},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DateUpdated},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Active},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${PurchasePrice},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PurchasePriceCurrency},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ShortTexts},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${LongTexts},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${TechTexts},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Items},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Prices},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Categories},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Images},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${BrandId},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BrandName},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${SupplierId},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SupplierName},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ParameterValues},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Variants},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Markets},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Vat},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PrimaryImage},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${FreightClassId},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IntrastatCode},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CountryOfOrigin},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${VariantGroupId},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${VatId},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExternalId},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${ActivationDate},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Feeds},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Urls},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MainCategoryId},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${RelatedProducts}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ProductModelsReadProduct' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "ProductId" = ${ProductId}
            "ArticleNumber" = ${ArticleNumber}
            "Names" = ${Names}
            "DateCreated" = ${DateCreated}
            "DateUpdated" = ${DateUpdated}
            "Active" = ${Active}
            "PurchasePrice" = ${PurchasePrice}
            "PurchasePriceCurrency" = ${PurchasePriceCurrency}
            "ShortTexts" = ${ShortTexts}
            "LongTexts" = ${LongTexts}
            "TechTexts" = ${TechTexts}
            "Items" = ${Items}
            "Prices" = ${Prices}
            "Categories" = ${Categories}
            "Images" = ${Images}
            "BrandId" = ${BrandId}
            "BrandName" = ${BrandName}
            "SupplierId" = ${SupplierId}
            "SupplierName" = ${SupplierName}
            "ParameterValues" = ${ParameterValues}
            "Variants" = ${Variants}
            "Markets" = ${Markets}
            "Vat" = ${Vat}
            "PrimaryImage" = ${PrimaryImage}
            "FreightClassId" = ${FreightClassId}
            "IntrastatCode" = ${IntrastatCode}
            "CountryOfOrigin" = ${CountryOfOrigin}
            "VariantGroupId" = ${VariantGroupId}
            "VatId" = ${VatId}
            "ExternalId" = ${ExternalId}
            "ActivationDate" = ${ActivationDate}
            "Feeds" = ${Feeds}
            "Urls" = ${Urls}
            "MainCategoryId" = ${MainCategoryId}
            "RelatedProducts" = ${RelatedProducts}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ProductModelsReadProduct<PSCustomObject>

.DESCRIPTION

Convert from JSON to ProductModelsReadProduct<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ProductModelsReadProduct<PSCustomObject>
#>
function ConvertFrom-JsonToProductModelsReadProduct {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ProductModelsReadProduct' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ProductModelsReadProduct
        $AllProperties = ("ProductId", "ArticleNumber", "Names", "DateCreated", "DateUpdated", "Active", "PurchasePrice", "PurchasePriceCurrency", "ShortTexts", "LongTexts", "TechTexts", "Items", "Prices", "Categories", "Images", "BrandId", "BrandName", "SupplierId", "SupplierName", "ParameterValues", "Variants", "Markets", "Vat", "PrimaryImage", "FreightClassId", "IntrastatCode", "CountryOfOrigin", "VariantGroupId", "VatId", "ExternalId", "ActivationDate", "Feeds", "Urls", "MainCategoryId", "RelatedProducts")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ProductId"))) { #optional property not found
            $ProductId = $null
        } else {
            $ProductId = $JsonParameters.PSobject.Properties["ProductId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ArticleNumber"))) { #optional property not found
            $ArticleNumber = $null
        } else {
            $ArticleNumber = $JsonParameters.PSobject.Properties["ArticleNumber"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Names"))) { #optional property not found
            $Names = $null
        } else {
            $Names = $JsonParameters.PSobject.Properties["Names"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "DateCreated"))) { #optional property not found
            $DateCreated = $null
        } else {
            $DateCreated = $JsonParameters.PSobject.Properties["DateCreated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "DateUpdated"))) { #optional property not found
            $DateUpdated = $null
        } else {
            $DateUpdated = $JsonParameters.PSobject.Properties["DateUpdated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Active"))) { #optional property not found
            $Active = $null
        } else {
            $Active = $JsonParameters.PSobject.Properties["Active"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PurchasePrice"))) { #optional property not found
            $PurchasePrice = $null
        } else {
            $PurchasePrice = $JsonParameters.PSobject.Properties["PurchasePrice"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PurchasePriceCurrency"))) { #optional property not found
            $PurchasePriceCurrency = $null
        } else {
            $PurchasePriceCurrency = $JsonParameters.PSobject.Properties["PurchasePriceCurrency"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ShortTexts"))) { #optional property not found
            $ShortTexts = $null
        } else {
            $ShortTexts = $JsonParameters.PSobject.Properties["ShortTexts"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "LongTexts"))) { #optional property not found
            $LongTexts = $null
        } else {
            $LongTexts = $JsonParameters.PSobject.Properties["LongTexts"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "TechTexts"))) { #optional property not found
            $TechTexts = $null
        } else {
            $TechTexts = $JsonParameters.PSobject.Properties["TechTexts"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Items"))) { #optional property not found
            $Items = $null
        } else {
            $Items = $JsonParameters.PSobject.Properties["Items"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Prices"))) { #optional property not found
            $Prices = $null
        } else {
            $Prices = $JsonParameters.PSobject.Properties["Prices"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Categories"))) { #optional property not found
            $Categories = $null
        } else {
            $Categories = $JsonParameters.PSobject.Properties["Categories"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Images"))) { #optional property not found
            $Images = $null
        } else {
            $Images = $JsonParameters.PSobject.Properties["Images"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "BrandId"))) { #optional property not found
            $BrandId = $null
        } else {
            $BrandId = $JsonParameters.PSobject.Properties["BrandId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "BrandName"))) { #optional property not found
            $BrandName = $null
        } else {
            $BrandName = $JsonParameters.PSobject.Properties["BrandName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SupplierId"))) { #optional property not found
            $SupplierId = $null
        } else {
            $SupplierId = $JsonParameters.PSobject.Properties["SupplierId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SupplierName"))) { #optional property not found
            $SupplierName = $null
        } else {
            $SupplierName = $JsonParameters.PSobject.Properties["SupplierName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ParameterValues"))) { #optional property not found
            $ParameterValues = $null
        } else {
            $ParameterValues = $JsonParameters.PSobject.Properties["ParameterValues"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Variants"))) { #optional property not found
            $Variants = $null
        } else {
            $Variants = $JsonParameters.PSobject.Properties["Variants"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Markets"))) { #optional property not found
            $Markets = $null
        } else {
            $Markets = $JsonParameters.PSobject.Properties["Markets"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Vat"))) { #optional property not found
            $Vat = $null
        } else {
            $Vat = $JsonParameters.PSobject.Properties["Vat"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PrimaryImage"))) { #optional property not found
            $PrimaryImage = $null
        } else {
            $PrimaryImage = $JsonParameters.PSobject.Properties["PrimaryImage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "FreightClassId"))) { #optional property not found
            $FreightClassId = $null
        } else {
            $FreightClassId = $JsonParameters.PSobject.Properties["FreightClassId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "IntrastatCode"))) { #optional property not found
            $IntrastatCode = $null
        } else {
            $IntrastatCode = $JsonParameters.PSobject.Properties["IntrastatCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CountryOfOrigin"))) { #optional property not found
            $CountryOfOrigin = $null
        } else {
            $CountryOfOrigin = $JsonParameters.PSobject.Properties["CountryOfOrigin"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "VariantGroupId"))) { #optional property not found
            $VariantGroupId = $null
        } else {
            $VariantGroupId = $JsonParameters.PSobject.Properties["VariantGroupId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "VatId"))) { #optional property not found
            $VatId = $null
        } else {
            $VatId = $JsonParameters.PSobject.Properties["VatId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ExternalId"))) { #optional property not found
            $ExternalId = $null
        } else {
            $ExternalId = $JsonParameters.PSobject.Properties["ExternalId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ActivationDate"))) { #optional property not found
            $ActivationDate = $null
        } else {
            $ActivationDate = $JsonParameters.PSobject.Properties["ActivationDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Feeds"))) { #optional property not found
            $Feeds = $null
        } else {
            $Feeds = $JsonParameters.PSobject.Properties["Feeds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Urls"))) { #optional property not found
            $Urls = $null
        } else {
            $Urls = $JsonParameters.PSobject.Properties["Urls"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "MainCategoryId"))) { #optional property not found
            $MainCategoryId = $null
        } else {
            $MainCategoryId = $JsonParameters.PSobject.Properties["MainCategoryId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "RelatedProducts"))) { #optional property not found
            $RelatedProducts = $null
        } else {
            $RelatedProducts = $JsonParameters.PSobject.Properties["RelatedProducts"].value
        }

        $PSO = [PSCustomObject]@{
            "ProductId" = ${ProductId}
            "ArticleNumber" = ${ArticleNumber}
            "Names" = ${Names}
            "DateCreated" = ${DateCreated}
            "DateUpdated" = ${DateUpdated}
            "Active" = ${Active}
            "PurchasePrice" = ${PurchasePrice}
            "PurchasePriceCurrency" = ${PurchasePriceCurrency}
            "ShortTexts" = ${ShortTexts}
            "LongTexts" = ${LongTexts}
            "TechTexts" = ${TechTexts}
            "Items" = ${Items}
            "Prices" = ${Prices}
            "Categories" = ${Categories}
            "Images" = ${Images}
            "BrandId" = ${BrandId}
            "BrandName" = ${BrandName}
            "SupplierId" = ${SupplierId}
            "SupplierName" = ${SupplierName}
            "ParameterValues" = ${ParameterValues}
            "Variants" = ${Variants}
            "Markets" = ${Markets}
            "Vat" = ${Vat}
            "PrimaryImage" = ${PrimaryImage}
            "FreightClassId" = ${FreightClassId}
            "IntrastatCode" = ${IntrastatCode}
            "CountryOfOrigin" = ${CountryOfOrigin}
            "VariantGroupId" = ${VariantGroupId}
            "VatId" = ${VatId}
            "ExternalId" = ${ExternalId}
            "ActivationDate" = ${ActivationDate}
            "Feeds" = ${Feeds}
            "Urls" = ${Urls}
            "MainCategoryId" = ${MainCategoryId}
            "RelatedProducts" = ${RelatedProducts}
        }

        return $PSO
    }

}

