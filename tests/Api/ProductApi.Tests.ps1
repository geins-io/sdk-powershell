#
# Geins Management API
#  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
# Version: v1.7
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

Describe -tag 'PSOpenAPITools' -name 'ProductApi' {
    Context 'Add-ImageToProduct' {
        It 'Test Add-ImageToProduct' {
            #$TestResult = Add-ImageToProduct -ProductId "TEST_VALUE" -ImageName "TEST_VALUE" -IsPrimaryImage "TEST_VALUE" -ProductIdType "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Add-AvailabilityMonitor' {
        It 'Test Add-AvailabilityMonitor' {
            #$TestResult = Add-AvailabilityMonitor -Model "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Add-CategoryToProduct' {
        It 'Test Add-CategoryToProduct' {
            #$TestResult = Add-CategoryToProduct -ProductId "TEST_VALUE" -ProductCategory "TEST_VALUE" -ProductIdType "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Add-RelatedProductsToProduct' {
        It 'Test Add-RelatedProductsToProduct' {
            #$TestResult = Add-RelatedProductsToProduct -ProductId "TEST_VALUE" -RelatedProducts "TEST_VALUE" -ProductIdType "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-BatchUpdateProductItems' {
        It 'Test Invoke-BatchUpdateProductItems' {
            #$TestResult = Invoke-BatchUpdateProductItems -ProductItems "TEST_VALUE" -ProductItemIdType "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-BatchUpdateStockValues' {
        It 'Test Invoke-BatchUpdateStockValues' {
            #$TestResult = Invoke-BatchUpdateStockValues -ProductItemStocks "TEST_VALUE" -ProductItemIdType "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'New-Product' {
        It 'Test New-Product' {
            #$TestResult = New-Product -Product "TEST_VALUE" -Include "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'New-ProductItems' {
        It 'Test New-ProductItems' {
            #$TestResult = New-ProductItems -ProductId "TEST_VALUE" -ProductItem "TEST_VALUE" -ProductIdType "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Get-ProductById' {
        It 'Test Get-ProductById' {
            #$TestResult = Get-ProductById -ProductId "TEST_VALUE" -ProductIdType "TEST_VALUE" -Include "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Get-ProductItemById' {
        It 'Test Get-ProductItemById' {
            #$TestResult = Get-ProductItemById -ItemId "TEST_VALUE" -ProductItemIdType "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-LinkRelatedProductsByRelationId' {
        It 'Test Invoke-LinkRelatedProductsByRelationId' {
            #$TestResult = Invoke-LinkRelatedProductsByRelationId -ProductId "TEST_VALUE" -RelationTypeId "TEST_VALUE" -RelatedProducts "TEST_VALUE" -ProductIdType "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-ListAllProductItemsPaged' {
        It 'Test Invoke-ListAllProductItemsPaged' {
            #$TestResult = Invoke-ListAllProductItemsPaged -Page "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-ListFeeds' {
        It 'Test Invoke-ListFeeds' {
            #$TestResult = Invoke-ListFeeds
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-ListProductItems' {
        It 'Test Invoke-ListProductItems' {
            #$TestResult = Invoke-ListProductItems
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-ListProductRelationTypes' {
        It 'Test Invoke-ListProductRelationTypes' {
            #$TestResult = Invoke-ListProductRelationTypes
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-QueryProducts' {
        It 'Test Invoke-QueryProducts' {
            #$TestResult = Invoke-QueryProducts -Query "TEST_VALUE" -Include "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-QueryProductsPaged' {
        It 'Test Invoke-QueryProductsPaged' {
            #$TestResult = Invoke-QueryProductsPaged -Page "TEST_VALUE" -Query "TEST_VALUE" -Include "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-QueryStock' {
        It 'Test Invoke-QueryStock' {
            #$TestResult = Invoke-QueryStock -ProductItemIds "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Update-Product' {
        It 'Test Update-Product' {
            #$TestResult = Update-Product -ProductId "TEST_VALUE" -Product "TEST_VALUE" -ProductIdType "TEST_VALUE" -Include "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Update-ProductItem' {
        It 'Test Update-ProductItem' {
            #$TestResult = Update-ProductItem -ItemId "TEST_VALUE" -ProductItem "TEST_VALUE" -ProductItemIdType "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

}
